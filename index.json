[{"content":"\u003ch2 id=\"indroduction\"\u003eIndroduction\u003c/h2\u003e\n\u003cp\u003eSharing your C++ games online can be tricky since web browsers can\u0026rsquo;t run them directly. But fear not!We have a solution: WebAssembly.\u003c/p\u003e\n\u003cp\u003eWebAssembly(or WASM for short) lets us convert C++ code  into a format that browesers understand. This means your games can now run smoothly right inside a web page.\u003c/p\u003e\n\u003cp\u003eIn this blog , we\u0026rsquo;ll use Emscripten to convert C++ code into WebAssembly to showcase your C++ games online.\u003c/p\u003e\n\u003ch2 id=\"install-the-necessary-dependencies\"\u003eInstall the Necessary Dependencies\u003c/h2\u003e\n\u003cp\u003eFirst we need to install git in our system(if you have it  already you can skip this part) with the following command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esudo apt-get install git -y\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eFor windows you can download the windows version \u003ca href=\"https://git-scm.com/download/win\"\u003eGit\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"install-emscripten\"\u003eInstall Emscripten\u003c/h3\u003e\n\u003cp\u003eThe next step is to use \u003ca href=\"https://emscripten.org/index.html#\"\u003eEmscripten\u003c/a\u003e, open source software that complies projects written in C or C++ or any language that uses \u003ca href=\"https://llvm.org/\"\u003eLLVM\u003c/a\u003e to browsers, \u003ca href=\"https://nodejs.org/en\"\u003eNode.js\u003c/a\u003e. The Emscripten SDK profiles all of the necessary tools (such as Clang, Python, and Node.js), as well as an update mechanism to enable migrating to newer versions of the toolchain as they are released.\u003c/p\u003e\n\u003cp\u003eTo download the Empscripten SDK, use the following command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003egit clone https://github.com/emscripten-core/emsdk.git\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOnce the file download is complete, change into the newly-created directory with the command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ecd emsdk\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eNext, we\u0026rsquo;ll make sure our source is updated with the command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003egit pull\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eNow, we can install the latest version Emscripten with the command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e./emsdk install latest\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis will take some time. Once the installation finishes, you can then activate the latest version with the command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e./emsdk activate latest\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eFinally, we\u0026rsquo;ll set the various environmental variables with the command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esource ./emsdk_env.sh\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eTo use the emcc in every terminal session open you .bashrc file with the command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003enano ~/.bashrc\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eand put this line at the end of it\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esource ./emsdk_env.sh \u0026amp;\u0026gt; /dev/null\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"creating-your-hello-world-source\"\u003eCreating your Hello, World! Source\u003c/h2\u003e\n\u003cp\u003eBefore compling our game we first complie a simple hello world program. Create the new file with the command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003enano hello_world.cpp\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIn that file, paste the following code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    std\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003ecout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e std\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eendl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSave and close the file with keyboard shotcut [Ctrl]+[X]\u003c/p\u003e\n\u003ch2 id=\"complie-the-source-code\"\u003eComplie the Source Code\u003c/h2\u003e\n\u003cp\u003eWhat we’re going to do now is use the emcc compiler to take our C++ code and turn it into a WebAssembly (WASM) HTML file. We’ll do that with the command:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eemcc hello_world.cpp -s WASM=1 -o hello_world.html\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"opening-the-html-file-in-web-broweser\"\u003eOpening the html file in web broweser\u003c/h2\u003e\n\u003cp\u003eFor opening the file you can use the following command in the program directory:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epython3 -m http.server\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOnce you run this command, the terminal will display the message \u0026ldquo;Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) \u0026hellip;\u0026rdquo; (or the port you specified), indicating that the server is running and serving files from the current directory. You can access the server in your web browser by navigating to the URL provided in the terminal message.\u003c/p\u003e\n\u003cp\u003eAnd that’s the gist of how you compile C++ code into HTML using WebAssembly, with the help of Emscripten.\u003c/p\u003e\n","description":"","image":"/images/em.png","permalink":"https://iamSt3el.github.io/blogs/first/","title":"How to compile your c/c++ coded game to WebAssembly with Emscripten"}]